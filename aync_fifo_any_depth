// Async fifo can be of any depth and not just limited to power of 2
module async_elastic_fifo (wrclk,wrrst,push,datain,full, rdclk,rdrst,pop,dataout,empty);
parameter WIDTH = 8, DEPTH = 10, AWIDTH = 4;
//localparam AWIDTH = $clog2(DEPTH);
input wrclk,wrrst,push,rdclk,rdrst,pop;
input [WIDTH-1:0] datain;
output reg full,empty;
output [WIDTH-1:0] dataout;
reg [AWIDTH:0] wrptr,rdptr; // keeping one extra bit to distinguish between empty and full condition
reg [AWIDTH:0] wrptr_sync1,rdptr_sync1,wrptr_sync2,rdptr_sync2;
reg [WIDTH-1:0] mem [DEPTH-1:0];
wire [AWIDTH:0] rdptr_gray_next, wrptr_gray_next;
  wire [AWIDTH-1:0] high_watermark,low_watermark;  
reg msb_rd,msb_wr;
  assign high_watermark =   (2**AWIDTH)/2 + (DEPTH/2);
  assign low_watermark = (2**AWIDTH)/2 - (DEPTH/2);
  
  
integer i;
//initialize mem
initial begin
  for(i=0; i<DEPTH; i=i+1)
    mem[i] = 0;
end
  
//Push the data in FIFO
  always@(posedge wrclk) begin
  if(push && ~full) mem[wrptr]<=datain;
end
  
//wrprt logic
  always @(posedge wrclk or negedge wrrst) begin
    if(!wrrst) begin
      	msb_wr <= 1'b0;
      wrptr <={msb_wr,low_watermark};
    end
  else if (push && !full)
    if( wrptr[AWIDTH-1:0] < high_watermark-1)
    	wrptr <= wrptr +1;
    else begin
      msb_wr <= ~msb_wr;
      wrptr <= {~msb_wr,low_watermark};
    end
      
end
assign rdptr_gray_next = rdptr ^ (rdptr>>1);
assign wrptr_gray_next = wrptr ^ (wrptr>>1);
  
//full logic : Have to compare rdptr in wr clk domain
// so used 2 sync flops and converted binary rdptr to gray to minimize //metastability condition and false full flag
always @ (posedge wrclk or negedge wrrst) begin
  if(!wrrst) begin
    rdptr_sync1 <= 0;
    rdptr_sync2 <= 0;
  end
  else begin
    rdptr_sync1 <= rdptr_gray_next; //convert rdptr to gray 
    rdptr_sync2 <= rdptr_sync1;
  end
end
  
  // Full signal 
always@(posedge wrclk or negedge wrrst) begin
  if(!wrrst) full <= 1'b0;
  else if ((wrptr_gray_next[AWIDTH:AWIDTH-1] != rdptr_sync2[AWIDTH:AWIDTH-1]) && (wrptr_gray_next[AWIDTH-2:0] ==rdptr_sync2[AWIDTH-2:0]) )
          full <= 1'b1;
  else full <= 1'b0;
end

// READ logic
  
      
// memory read out
assign dataout = mem[rdptr];   
 
//Read pointer logic
always @(posedge rdclk or negedge rdrst) begin
  if(!rdrst) begin
    msb_rd <= 1'b0;
    rdptr <={msb_rd,low_watermark};
  end
  else if (pop && !empty)
    if( rdptr[AWIDTH-1:0] < high_watermark-1)
    	rdptr <= rdptr +1;
    else begin
      msb_rd <= ~msb_rd;
      rdptr <= {~msb_rd,low_watermark};
    end
    
end
//Sync wrptr into read domain  
always @ (posedge rdclk or negedge rdrst) begin
  if(!wrrst) begin
    wrptr_sync1 <= 0;
    wrptr_sync2 <= 0;
  end
  else begin
    wrptr_sync1 <= wrptr_gray_next; //convert rdptr to gray 
    wrptr_sync2 <= wrptr_sync1;
  end
end
// Generate empty signal
  always@(posedge rdclk or negedge rdrst) begin
    if(!rdrst) empty <= 1'b0;
    else if ( (rdptr_gray_next == wrptr_sync2) )
          empty <= 1'b1;
  else empty <= 1'b0;
end  
  
endmodule
